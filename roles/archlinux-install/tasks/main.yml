---
- debug:
    msg: "Installing system for user {{ username }} with public ssh key {{ user_ssh_public_key | default('') }}"

- name: Check device name {{ install_device_name }} exists
  stat: "path={{ install_device_name }}"
  delegate_to: "{{ target_ip }}"
  register: device
  failed_when: not device.stat.exists

- name: Check if partitions are mounted
  delegate_to: "{{ target_ip }}"
  block:
    - command: mountpoint -q /mnt
      register: root_mountpoint
      ignore_errors: yes
    - command: mountpoint -q /mnt/boot
      register: boot_mountpoint
      ignore_errors: yes
    - set_fact:
        root_mounted: "{{ root_mountpoint.rc == 0 }}"
        boot_mounted: "{{ boot_mountpoint.rc == 0 }}"

- name: set root partition for bios
  delegate_to: "{{ target_ip }}"
  when: bootloader == "bios"
  set_fact:
    root_partition_number: "1"

- name: set root partition for uefi
  delegate_to: "{{ target_ip }}"
  when: bootloader != "bios"
  set_fact:
    root_partition_number: "2"

- name: Label {{ install_device_name }} as gpt
  when: not root_mounted and bootloader != "bios"
  delegate_to: "{{ target_ip }}"
  community.general.parted:
      device: "{{ install_device_name }}"
      label: gpt

- name: Label {{ install_device_name }} as msdos
  when: not root_mounted and bootloader == "bios"
  delegate_to: "{{ target_ip }}"
  community.general.parted:
      device: "{{ install_device_name }}"
      label: msdos

- name: Create btrfs partition on bios
  delegate_to: "{{ target_ip }}"
  when: not root_mounted and bootloader == "bios"
  community.general.parted:
    device: "{{ install_device_name }}"
    number: 1
    state: present
    part_start: 1MB
    part_end: 100%
    fs_type: btrfs

- name: Create boot partition for uefi with a size of 512MB
  delegate_to: "{{ target_ip }}"
  when: not root_mounted and bootloader != "bios"
  community.general.parted:
    device: "{{ install_device_name }}"
    number: 1
    state: present
    flags: esp
    part_end: 512MB
    fs_type: fat32

- name: Create btrfs partition on uefi
  delegate_to: "{{ target_ip }}"
  when: not root_mounted and bootloader != "bios"
  community.general.parted:
    device: "{{ install_device_name }}"
    number: 2
    state: present
    part_start: 512MB
    part_end: 100%
    fs_type: btrfs

- name: Format efi boot partition
  when: not boot_mounted and bootloader != "bios"
  delegate_to: "{{ target_ip }}"
  filesystem: 
    dev: "{{ install_device_name }}1"
    fstype: vfat
    force: yes

- name: Format root partition with btrfs
  when: not root_mounted
  delegate_to: "{{ target_ip }}"
  filesystem: 
    dev: "{{ install_device_name }}{{ root_partition_number }}"
    fstype: btrfs
    force: yes

- name: Mount Root partition
  when: not root_mounted
  delegate_to: "{{ target_ip }}"
  mount:
    path: "/mnt"
    src: "{{ install_device_name }}{{ root_partition_number }}"
    state: mounted
    fstype: btrfs
    opts: compress=zstd:3,noatime

- name: Create a directory if it does not exist
  delegate_to: "{{ target_ip }}"
  when: bootloader != "bios"
  ansible.builtin.file:
    path: /mnt/efi
    state: directory

- name: Mount boot partition
  delegate_to: "{{ target_ip }}"
  when: not boot_mounted and bootloader != "bios"
  mount:
    path: "/mnt/efi"
    src: "{{ install_device_name }}1"
    state: mounted
    fstype: vfat

- name: Run pacstrap base system
  delegate_to: "{{ target_ip }}"
  command: pacstrap /mnt base linux linux-firmware

- name: Remove fstab
  delegate_to: "{{ target_ip }}"
  ansible.builtin.file:
    path: /mnt/etc/fstab
    state: absent

- name: Run genfstab
  delegate_to: "{{ target_ip }}"
  command: genfstab -U /mnt >> /mnt/etc/fstab

- name: Set hostname to archlinux
  delegate_to: "{{ target_ip }}"
  copy: 
    dest: /mnt/etc/hostname
    content: archlinux

- name: use locale en_US.UTF-8
  delegate_to: "{{ target_ip }}"
  ansible.builtin.lineinfile:
    path: /mnt/etc/locale.gen
    regexp: '^en_US.UTF-8 UTF-8'
    line: en_US.UTF-8 UTF-8

- name: Set language to en_US.UTF-8 UTF-8"
  delegate_to: "{{ target_ip }}"
  copy: 
    dest: /mnt/etc/locale.conf
    content: LANG=en_US.UTF-8

- name: Set keymap to de_CH-latin1
  delegate_to: "{{ target_ip }}"
  copy: 
    dest: /mnt/etc/vconsole.conf
    content: KEYMAP=de_CH-latin1

- name: set hosts
  delegate_to: "{{ target_ip }}"
  copy:
    dest: /mnt/etc/hosts
    content: |
      127.0.0.1	localhost
      ::1		localhost
      127.0.1.1	archlinux.localdomain	archlinux

- name: Set modules
  delegate_to: "{{ target_ip }}"
  when: mkinitcpio_modules is defined
  copy: 
    dest: /mnt/etc/mkinitcpio.conf
    force: yes
    content: |
      MODULES=({{ mkinitcpio_modules }})
      BINARIES=()
      FILES=()
      HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)
      COMPRESSION="zstd"

- name: Configure System
  delegate_to: "{{ target_ip }}"
  ignore_errors: true
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        ln -sf /usr/share/zoneinfo/CET /etc/localtime
        hwclock --systohc
        locale-gen
        echo -e "root\nroot" | passwd
        pacman -Sy --noconfirm btrfs-progs openssh dhcpcd nano python sudo iwd
        systemctl enable sshd
        systemctl enable dhcpcd       
        mkinitcpio -P || true

- name: create refind bootloader
  delegate_to: "{{ target_ip }}"
  ignore_errors: true
  when: bootloader != "bios"
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        pacman -Sy --noconfirm efibootmgr refind 
        refind-install

- name: create grub bootloader
  delegate_to: "{{ target_ip }}"
  ignore_errors: true
  when: bootloader == "bios"
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        pacman -Sy --noconfirm grub
        grub-install {{ install_device_name }}
        grub-mkconfig -o /boot/grub/grub.cfg

- name: Install cloud-init
  delegate_to: "{{ target_ip }}"
  ignore_errors: true
  when: cloud_init
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        pacman -Sy --noconfirm cloud-init cloud-guest-utils gptfdisk
        systemctl enable cloud-init.service
        systemctl enable cloud-final.service

- name: set cloud-init cloud.cfg
  delegate_to: "{{ target_ip }}"
  copy:
    owner: root
    group: root
    force: yes
    dest: /mnt/etc/cloud/cloud.cfg
    content: |
      users:
        - name: {{ username }}
          sudo: ["ALL=(ALL) NOPASSWD:ALL"]
          shell: /bin/bash
          groups: users, wheel
          lock_passwd: true
          ssh_authorized_keys:
            - {{ user_ssh_public_key }}
      disable_root: true
      preserve_hostname: false
      datasource_list: [ Azure ]

      # The modules that run in the 'init' stage
      cloud_init_modules:
      - migrator
      - seed_random
      - bootcmd
      - write-files
      - growpart
      - resizefs
      - disk_setup
      - mounts
      - set_hostname
      - update_hostname
      - update_etc_hosts
      - ca-certs
      - rsyslog
      - users-groups
      - ssh

      # The modules that run in the 'config' stage
      cloud_config_modules:
      - ssh-import-id
      - locale
      - set-passwords
      - ntp
      - timezone
      - runcmd

      # The modules that run in the 'final' stage
      cloud_final_modules:
      - package-update-upgrade-install
      - write-files-deferred
      - mcollective
      - reset_rmc
      - refresh_rmc_and_interface
      - rightscale_userdata
      - scripts-vendor
      - scripts-per-once
      - scripts-per-boot
      - scripts-per-instance
      - scripts-user
      - ssh-authkey-fingerprints
      - keys-to-console
      - install-hotplug
      - phone-home
      - final-message
      - power-state-change

      system_info:
        distro: arch
        paths:
            cloud_dir: /var/lib/cloud/
            templates_dir: /etc/cloud/templates/
        ssh_svcname: sshd   

      #cloud-config
      device_aliases: {'ephemeral0': '/dev/disk/cloud/azure_resource'}
      disk_setup:
        ephemeral0:
          table_type: gpt
          layout: [66, [33,82]]
          overwrite: true
      fs_setup:
        - device: ephemeral0.1
          filesystem: ext4
        - device: ephemeral0.2
          filesystem: swap
      mounts:
        - ["ephemeral0.1", "/mnt"]
        - ["ephemeral0.2", "none", "swap", "sw,nofail,x-systemd.requires=cloud-init.service", "0", "0"]

- name: Install firewalld
  delegate_to: "{{ target_ip }}"
  ignore_errors: true
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        pacman -Sy --noconfirm firewalld nftables
        firewall-cmd --zone public --permanent --add-rich-rule 'rule service name="ssh" accept limit value="2/m"'
        systemctl enable firewalld

- name: get UUID
  delegate_to: "{{ target_ip }}"
  shell: "blkid | grep {{ install_device_name }}2 | awk -F : '{print \"blkid -s UUID -o value \"$1}' |sh"
  register: UUID_value

- name: set refind setting because incorrect settings due to arch-chroot 
  delegate_to: "{{ target_ip }}"
  copy:
    owner: root
    group: root
    force: yes
    dest: /mnt/boot/refind_linux.conf
    content: |
      "Boot using default options"     "root=UUID={{ UUID_value['stdout'] }} rw add_efi_memmap initrd=boot\initramfs-linux.img"
      "Boot using fallback initramfs"  "root=UUID={{ UUID_value['stdout'] }} rw add_efi_memmap initrd=boot\initramfs-linux-fallback.img"
      "Boot to terminal"               "root=UUID={{ UUID_value['stdout'] }} rw add_efi_memmap initrd=boot\initramfs-linux.img systemd.unit=multi-user.target"

- name: Add user
  delegate_to: "{{ target_ip }}"
  when: username is defined
  command:
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        useradd -m {{ username }}
        {% if ansible_ssh_pass is defined %}
        echo -e "{{ ansible_ssh_pass }}\n{{ ansible_ssh_pass }}" | passwd {{ username }}
        {% endif %}
        gpasswd -a {{ username }} wheel
        mkdir /home/{{ username }}/.ssh
        echo "{{ user_ssh_public_key | default("") }}" >> /home/{{ username }}/.ssh/authorized_keys
        
- name: allow admin user passwordless sudo
  delegate_to: "{{ target_ip }}"
  when: username is defined
  ansible.builtin.lineinfile:
    path: /mnt/etc/sudoers
    regexp: '^{{ username }} ALL=(ALL:ALL) NOPASSWD:ALL'
    line: "{{ username }} ALL=(ALL:ALL) NOPASSWD:ALL"