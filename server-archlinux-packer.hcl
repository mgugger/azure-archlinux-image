# This file was autogenerated by the BETA 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
variable "password" {
  type = string
}

variable "random_seed_for_oath" {
  type = string
}

variable "resource_group_for_image" {
  type = string
}

variable "ssh_authorized_keys_bas64" {
  type = string
}

variable "storage_account_name" {
  type = string
}

variable "username" {
  type = string
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/from-1.5/blocks/source
source "qemu" "autogenerated_1" {
  accelerator      = "kvm"
  boot_command     = ["<enter><wait60><enter>", "curl -sfSLO http://{{ .HTTPIP }}:{{ .HTTPPort }}/packer.sh<enter><wait>", "chmod +x *.sh<enter>", "./packer.sh<enter>"]
  boot_wait        = "20s"
  cpus             = 2
  disk_cache       = "unsafe"
  disk_compression = true
  disk_discard     = "unmap"
  disk_size        = "4000M"
  firmware         = "/usr/share/OVMF/x64/OVMF_CODE.fd"
  format           = "raw"
  headless         = true
  http_directory   = "http"
  iso_checksum     = "sha256:1a2c1cdea0118b60525f55ee616e9cd4cf68fe17db906ce3d8e46fd06f9907eb"
  iso_url          = "https://mirror.puzzle.ch/archlinux/iso/latest/archlinux-2023.07.01-x86_64.iso"
  output_directory = "./packer_output/qemu"
  qemuargs         = [["-m", "2048M"], ["-boot", "menu=on,splash-time=10000"]]
  shutdown_command = "sudo systemctl poweroff"
  ssh_password     = "root"
  ssh_timeout      = "20m"
  ssh_username     = "root"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.qemu.autogenerated_1"]

  provisioner "shell" {
    script = "./http/wait-for-keyring.sh"
  }
  provisioner "shell" {
    inline = ["pacman -Sy --noconfirm archlinux-keyring && pacman -Sy --noconfirm ansible"]
  }
  provisioner "ansible-local" {
    extra_arguments = ["--extra-vars", "\"username=${var.username} password=${var.password} ssh_authorized_keys_bas64=${var.ssh_authorized_keys_bas64} random_seed=${var.random_seed_for_oath}\"", "-v"]
    playbook_dir    = "playbooks"
    playbook_file   = "playbooks/1_archlinux-server-install-playbook.yml"
  }
  post-processor "shell-local" {
    inline = ["set -e; qemu-img convert -f raw -O vpc -o subformat=fixed,force_size ./packer_output/qemu/packer-qemu ./packer_output/archlinux.vhd", "azcopy login --identity", "azcopy copy ./packer_output/archlinux.vhd https://${var.storage_account_name}.blob.core.windows.net/archlinux/", "az login --identity", "az image create --source https://${var.storage_account_name}.blob.core.windows.net/archlinux/archlinux.vhd --name archlinux -g ${var.resource_group_for_image} --os-type linux --hyper-v-generation V2 --os-disk-caching ReadOnly", "echo \"random seed is: ${var.random_seed_for_oath} and base32 $(oathtool -v --totp -d 6 ${var.random_seed_for_oath} | grep '^Base32 secret:' | sed 's/^.*: //')\"", "echo \"QR Code for oath otp is\"", "qrencode -t UTF8 \"otpauth://totp/Archlinux:${var.username}@archlinux?secret=$(oathtool -v --totp -d 6 ${var.random_seed_for_oath} | grep \"^Base32 secret:\" | cut -d \" \" -f3)&issuer=${var.username}\"", "rm -rf packer_output/"]
  }
}
