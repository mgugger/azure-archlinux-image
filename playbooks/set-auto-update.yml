---
- name: Install pacman-auto-update
  command: 
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        sudo -u {{ username }} yay -Sy --noconfirm --aur pacman-auto-update
        systemctl enable pacman-auto-update.timer

- name: Create /usr/lib/systemd/system/pacman-auto-update.service.d/ directory
  ansible.builtin.file:
    path: /usr/lib/systemd/system/pacman-auto-update.service.d/
    state: directory

- name: set pacman-auto-update systemd proxy settings
  copy:
    owner: root
    group: root
    force: yes
    dest: /usr/lib/systemd/system/pacman-auto-update.service.d/http_proxy.conf
    content: |
      [Service]
      Environment="http_proxy=http://127.0.0.1:8888"
      Environment="https_proxy=http://127.0.0.1:8888"
      Environment="HTTP_PROXY=http://127.0.0.1:8888"
      Environment="HTTPS_PROXY=http://127.0.0.1:8888"

- name: set systemd reboot-sched.service
  copy:
    owner: root
    group: root
    force: yes
    dest: /mnt/etc/systemd/system/reboot-sched.service
    content: |
      [Unit]
      Description=Scheduled Reboot

      [Service]
      Type=simple
      ExecStart=/usr/bin/systemctl --no-block reboot

- name: set systemd reboot-sched.timer
  copy:
    owner: root
    group: root
    force: yes
    dest: /mnt/etc/systemd/system/reboot-sched.timer
    content: |
      [Unit]
      Description=Reboot Scheduling

      [Timer]
      OnCalendar=Mon,Thu *-*-* 03:00:00
      RandomizedDelaySec=180min

      [Install]
      WantedBy=multi-user.target

- name: Enable reboot-sched.timer
  command: 
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        systemctl daemon-reload
        systemctl enable reboot-sched.timer

- name: Create /etc/pacman.d/hooks directory
  ansible.builtin.file:
    path: /etc/pacman.d/hooks
    state: directory

- name: pacman hook to disallow shutdown or reboot while pacman is running
  copy:
    owner: root
    group: root
    force: yes
    dest: /etc/pacman.d/hooks/00-prevent-interruption-pre.hook
    content: |
      [Trigger]
      Operation = Install
      Operation = Upgrade
      Operation = Remove
      Type = Package
      Target = *

      [Action]
      Description = Masking systemd targets to prevent interruption...
      When = PreTransaction
      Exec = /usr/bin/systemctl --runtime mask halt.target poweroff.target reboot.target kexec.target suspend.target hibernate.target hybrid-sleep.target suspend-then-hibernate.target sleep.target
      Depends = systemd

- name: pacman hook to allow shutdown or reboot after pacman finished
  copy:
    owner: root
    group: root
    force: yes
    dest: /etc/pacman.d/hooks/00-prevent-interruption-pre.hook
    content: |
      [Trigger]
      Operation = Install
      Operation = Upgrade
      Operation = Remove
      Type = Package
      Target = *

      [Action]
      Description = Unmasking systemd targets to reenable power management...
      When = PostTransaction
      Exec = /usr/bin/systemctl --runtime unmask halt.target poweroff.target reboot.target kexec.target suspend.target hibernate.target hybrid-sleep.target suspend-then-hibernate.target sleep.target
      Depends = systemd

### Snap-pac
- name: Install snap-pac to create btrfs snapshots after/before pacman updates
  command: 
    argv:
      - /usr/bin/arch-chroot
      - /mnt
      - /bin/bash
      - -c
      - |
        sudo -u {{ username }} yay -Sy --noconfirm --aur snap-pac-grub
        #Dependency of above: pacman -Sy --noconfirm snap-pac
        snapper -c root create-config /
        systemctl enable snapper-timeline.timer
        systemctl enable snapper-cleanup.timer

- name: create snapper root config
  command: 
    argv:
    - /usr/bin/arch-chroot
    - /mnt
    - /bin/bash
    - -c
    - |
      snapper --no-dbus -c root create-config /

- name: set snapper TIMELINE_MIN_AGE
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_MIN_AGE(.*)$
    line: TIMELINE_MIN_AGE="1800"

- name: set snapper TIMELINE_LIMIT_HOURLY
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_LIMIT_HOURLY(.*)$
    line: TIMELINE_LIMIT_HOURLY="0"

- name: set snapper TIMELINE_LIMIT_DAILY
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_LIMIT_DAILY(.*)$
    line: TIMELINE_LIMIT_DAILY="7"

- name: set snapper TIMELINE_LIMIT_WEEKLY
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_LIMIT_WEEKLY(.*)$
    line: TIMELINE_LIMIT_WEEKLY="0"

- name: set snapper TIMELINE_LIMIT_MONTHLY
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_LIMIT_MONTHLY(.*)$
    line: TIMELINE_LIMIT_MONTHLY="0"

- name: set snapper TIMELINE_LIMIT_YEARLY
  ansible.builtin.lineinfile:
    path: /mnt/etc/snapper/configs/root
    regexp: ^TIMELINE_LIMIT_YEARLY(.*)$
    line: TIMELINE_LIMIT_YEARLY="0"